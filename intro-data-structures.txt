1. A line of people at an amusement park ride.

   - The line is composed of members, represented as strings.
   - There is a front to the line, as well as a back.
   - When someone enters the line, place them at the end.
   - People may leave the line whenever they see fit, and those behind them take their place.

Given the above real-world information, use an array data structure to code the following solution.

// a) Use an array input: ["Vivian", "Ava", "Josh", "Patrick", "Mike"]
let lineParkRide = ["Vivian", "Ava", "Josh", "Patrick", "Mike"];

// b) Insert a new person, "Mary" at the end of the line. In other words, you should insert Mary after Mike.
lineParkRide.push("Mary");

// c) Find a person in line named "Josh." This function should return the position of 2 in the array, (recall that arrays are 0-based).
lineParkRide.indexOf("Josh")

// d) Find a person in line named "Emily." What should your function return if it does not find the item in the array?

let personName = "Emily"
let findPerson = lineParkRide.indexOf(personName);

if (findPerson == -1) {
  console.log(personName + " is not in line.");
} else {
  console.log(personName + " is in line at position " + (findPerson + 1));
}

// .e) What if Ava wants to allow a friend, "Melissa", to cut in line in front of her? How would you code this so Melissa appears before Ava?
lineParkRide.splice(1, 0, "Melissa");

//f) If Patrick wants to leave the line, how would you delete him from the array?
lineParkRide.splice(4, 1);

console.log(lineParkRide);


2. Provide another real-world example that you can model using a data structure.

A grocery store's inventory of goods.  

3. How would your data structure allow developers to access and manipulate the data?

- Low inventory can alert the store to order more items.
- Excess inventory can be discounted or transferred to another store