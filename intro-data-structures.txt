1. A line of people at an amusement park ride.

   - The line is composed of members, represented as strings.
   - There is a front to the line, as well as a back.
   - When someone enters the line, place them at the end.
   - People may leave the line whenever they see fit, and those behind them take their place.

Given the above real-world information, use an array data structure to code the following solution.

// a) Use an array input: ["Vivian", "Ava", "Josh", "Patrick", "Mike"]
let lineParkRide = ["Vivian", "Ava", "Josh", "Patrick", "Mike"];

// b) Insert a new person, "Mary" at the end of the line. In other words, you should insert Mary after Mike.
lineParkRide.push("Mary");

// c) Find a person in line named "Josh." This function should return the position of 2 in the array, (recall that arrays are 0-based).
lineParkRide.indexOf("Josh")

// d) Find a person in line named "Emily." What should your function return if it does not find the item in the array?

function findPerson(person) {
  let isInLine = false;
  let linePosition;
  
  for (let i = 0; i < lineParkRide.length; i++){
    //console.log(lineParkRide[i]);
    if(person === lineParkRide[i]){
      isInLine = true;
      linePosition = i + 1;
    }
  }
  
  if (isInLine){
      console.log(person + " is in line at position " + linePosition);
    } else {
      console.log(person + " is not in line.")
    }
}
findPerson("Emily");

// .e) What if Ava wants to allow a friend, "Melissa", to cut in line in front of her? How would you code this so Melissa appears before Ava?

function cutInLine(findPerson, newPerson){
  let isInline = false;
  let setIndex;
    for (let i = 0; i < lineParkRide.length; i++){
        if(findPerson == lineParkRide[i]) {
          isInLine = true;
          setIndex = i;
        }
    }
    if (isInLine){
      lineParkRide.splice(setIndex, 0, newPerson);
      console.log(lineParkRide);
    } else {
      console.log(findPerson + " is not in line.");
    }
}
cutInLine("Ava", "Melissa");

//f) If Patrick wants to leave the line, how would you delete him from the array?

function leaveLine(findPerson){
  let isInline = false;
  let setIndex;
    for (let i = 0; i < lineParkRide.length; i++){
        if(findPerson == lineParkRide[i]) {
          isInLine = true;
          setIndex = i;
        }
    }
    if (isInLine){
      lineParkRide.splice(setIndex, 1);
      console.log(lineParkRide);
    } else {
      console.log(findPerson + " is not in line.");
    }
}
leaveLine("Patrick");


2. Provide another real-world example that you can model using a data structure.

Sending multiple jobs to a printer is a real world example of a data structure that uses a FIFO queue data structure.  When the first job is completed, the second job can start printing.

  - The queue of print jobs are represented by strings.
  - There is a first job and an end job.
  - When a new job is added, it is added at the end.
  - Print jobs may be canceled and the following print job takes place of the canceled job.

3. How would your data structure allow developers to access and manipulate the data?

Example Queue Data Strucuture:
  
  let printJobs = [word.doc, image.png, index.html, notes.txt];

Adding jobs to the queue:
  
  printJobs.push('screenshot.jpg');

Detecting if a job is available.

  let findPrintJob = "index.html";
  let detectJob = printJobs.indexOf(findPrintJob);

  if (detectJob == -1) {
    console.log(detectJob + " is not available.");
  } else {
    console.log(detectJob + " is in queue at position " + (detectJob + 1));
  }

Deleting a print job.

  printJobs.splice(2, 1);
  // detects index of 2 and removes that item - index.html