////// EXERCISES

// 1. What is a binary tree and what makes it unique to other trees?
Binary tree is a hierarchal tree data structure consisting or nodes.  A root node start from the top and can consist of up to 2 nodes; a left and right child node.  

// 2. What is a heuristic?
An imperfect solution to a complex problem made by algorithms by making guesses.  Accuracy is compromised while problems are resolved quickly.

// 3. What is another problem besides the shortest-path problem that requires the use of heuristics?
Search queries: With many queries searched by users on search engines like google, heuristics in algorithms may be performed on search results to help increase the likeliness that the results are appropriate for the user.

Stock market: Making predictions about future trends can be made in algorithms by analyzing the current strength of the economy and analyzing past data points.  

// 4. What is the difference between a depth-first search and a breadth-first search?
Depth-first search is an algorithm that traverses/searches a tree or graph data strucuture.  Searches start at the root and explore as far as possible along each branch before backtracking. Search explores the depth through levels until it reaches the end.

Breadth-first search is also an algorithm that traverses/searches a tree or graph data strucuture that starts at the root and explores the neighbor nodes first before moving on to the next level.

// 5. Explain in your own words what an undirected, a-cyclic, unweighted graph is.
An undirected, a-cyclic, unweighted graph connects nodes bi-directionally without any loops and offers no cost of travel between nodes.

// 6. What kind of graph is a binary search tree?
A binary search tree is a directed, a-cyclic, and mostly unweighted graph.



////// QUESTIONS

// 1. Given a Binary Search Tree and a value, write a function that checks to see whether the value exists within the tree.  Example: The value 10 exists in the tree. The value 23 does not exist in the tree.

class Node { 
  constructor(data) { 
    this.data = data;
    this.left = null;
    this.right = null;
  } 
} 

class Tree { 
  constructor() { 
    this.root = null; 
  } 
  
  setData(data){ 
    var newNode = new Node(data);

    if(this.root === null) {
      this.root = newNode;
    } else { 
      this.insertNode(this.root, newNode); 
    }
  } 

  insertNode(node, newNode) { 
    if(newNode.data < node.data) { 
      if(node.left === null) {
        node.left = newNode;
      } 
      else {
        this.insertNode(node.left, newNode);  
      }
    } else { 
      if(node.right === null) {
        node.right = newNode;
      } else  {
        this.insertNode(node.right, newNode); 
      }
    } 
  }

  getRoot() { 
    return this.root;
  }

  find(node, data) { 
    if(node === null) {
      return "The data: " + data + " does not exist in this binary tree.";
    } else if(data < node.data) {
        return this.find(node.left, data);
    } else if(data > node.data) {
        return this.find(node.right, data);
    } else {
      return node;
    }
  } 
}

var tree = new Tree();
//let arr = [8, 3, 10, 1, 6, 14, 4, 7, 13];
tree.setData(8);
tree.setData(3);
tree.setData(10);
tree.setData(1);
tree.setData(6);
tree.setData(14);
tree.setData(4);
tree.setData(7);
tree.setData(13);

var root = tree.getRoot();
//console.log(root);
console.log(tree.find(root, 3));


////// 2. Given a Binary Search Tree and two nodes, n1 and n2, write a function that finds the distance between the two nodes.

Example: The distance between the nodes 4 and 10 is 4. The distance between the nodes 8 and 10 is 1. The distance between the nodes 1 and 14 is 4.

class Node { 
  constructor(data) { 
    this.data = data;
    this.left = null;
    this.right = null;
  } 
} 

class Tree { 
  constructor() { 
    this.root = null; 
  } 
  
  setData(data){ 
    var newNode = new Node(data);

    if(this.root === null) {
      this.root = newNode;
    } else { 
      this.insertNode(this.root, newNode); 
    }
  } 

  insertNode(node, newNode) { 
    if(newNode.data < node.data) { 
      if(node.left === null) {
        node.left = newNode;
      } 
      else {
        this.insertNode(node.left, newNode);  
      }
    } else { 
      if(node.right === null) {
        node.right = newNode;
      } else  {
        this.insertNode(node.right, newNode); 
      }
    } 
  }

  getRoot() { 
    return this.root;
  }

  find(node, data) { 
    if(node === null) {
      return 'The data: ' + data + ' does not exist in this binary tree.';
    } else if(data < node.data) {
        return this.find(node.left, data);
    } else if(data > node.data) {
        return this.find(node.right, data);
    } else {
      return node;
    }
  }

	findDist(root, node1, node2) {
		let lca = this.findCommonAncestor(root, node1, node2);
		let distanceRootToNode1 = this.countAncestors(node1);
		let distanceRootToNode2 = this.countAncestors(node2);
		let distanceRootToAncestor = this.countAncestors(lca);
		let distance = (distanceRootToNode1 + distanceRootToNode2) - (2 * distanceRootToAncestor);
		return ('The distance between ' + node1 + ' and ' + node2 + ' is ' + distance + '.');
	}

	findCommonAncestor(root, node1, node2) {
		if (!root) {
      console.log('The root of the binary tree has not been initialized');
      return;
    }
    let lca = root.data;
    if (node1 === lca || node2 === lca) {
			return lca;
		} else if (node1 < lca && node2 < lca) {
			return this.findCommonAncestor(root.left, node1, node2);
		} else if (node1 > lca && node2 > lca) {
			return this.findCommonAncestor(root.right, node1, node2);
		} else return lca;
	}

	countAncestors(data) {
		let thisNode = this.root;
		let nodeCount = 0;
		while (thisNode) {
			if (data === thisNode.data) {
				return nodeCount;
      }
      
      if (data < thisNode.data) {
        thisNode = thisNode.left;
      } else {
        thisNode = thisNode.right;
      }

			nodeCount++;
		}
	}
}

var tree = new Tree();
//let arr = [8, 3, 10, 1, 6, 14, 4, 7, 13];
tree.setData(8);
tree.setData(3);
tree.setData(10);
tree.setData(1);
tree.setData(6);
tree.setData(14);
tree.setData(4);
tree.setData(7);
tree.setData(13);

var root = tree.getRoot();
//console.log(root);

// console.log(tree.find(root, 3));
console.log(tree.findDist(root, 4, 10));