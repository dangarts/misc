Exercises

1. What is the main difference between a stack and a queue?
Stack uses LIFO approach while queue uses FIFO.

2. What are the similarities between stacks and queues?
They are both data structures.  There is an input and an output of data elements.

3. Imagine you are an engineer tasked with implementing the UNDO and REDO options in a word processor such as Microsoft Word. Which data structure would you use for each option and why?

- UNDO: Stack (LIFO)
- REDO: Stack (LIFO)




PROGRAMMING QUESTIONS

1. Given a string, reverse it using a stack. For example, the string "Bloc!" should be converted to "!colB".

//pseudocode
FUNCTION REVERSE(original)
  INIT a new stack
  FOR each character in original
    CALL stack.push WITH character
  END FOR
  INIT reversed to empty string
  WHILE stack is not empty
    CALL stack.pop RETURNING character
    APPEND character to reversed
  END WHILE
  RETURN reversed
END FUNCTION

//Javascript implementation
function reverse(original){
  
  // Create stack
  var stack = [];
  for (let i = 0 ; i < original.length ; i++){
    stack.push(original[i]);
  }
  
  //Reverse stack
  var reverseStack = [];
  for (let i = original.length; i > 0 ; i--){
    var temp = stack.pop();
    reverseStack += temp;
  }
  console.log(reverseStack);
}
reverse("test");


2. Implement the pop method of a stack using one queue. Make a FIFO data structure mirror the functionality of a LIFO data structure. Since the internal list is not the same as defined in the checkpoint, it may help to rewrite the pseudocode first.

//pseudocode
FUNCTION REVERSE(original)
  INIT a new stack
  FOR each character in original
    CALL stack.push WITH character
  END FOR
  INIT reversed to empty string
  WHILE stack is not empty
    CALL stack.shift RETURNING character
    APPEND character to reversed
  END WHILE
  RETURN reversed
END FUNCTION

//Javascript implementation
function reverse(original){
  
  // Create stack
  var stack = [];
  for (let i = original.length - 1 ; i >= 0 ; i--){
    stack.push(original[i]);
    console.log(stack);
  }
  
  //Reverse stack
  var reverseStack = [];
  for (let i = 0 ; i < original.length ; i++){
    var temp = stack.shift();
    reverseStack += temp;
  }
  console.log(reverseStack); 
}
reverse("test");


To delete an item, take all of the elements in the queue one at a time and put them at the end of the queue, except for the last one which should be removed and returned.

1. Implement the enqueue and dequeue methods defined in the checkpoint inside your own Queue class.

//pseudocode
FUNCTION REVERSE(original)
   INIT a new stack
   CALL FUNCTION enqueue(stack, original)
   INIT reverseStack to empty string
   CALL FUNCTION dequeue(stack, original, reverseStack)
   RETURN reversed
END FUNCTION

FUNCTION enqueue(stack, original)
   FOR each character in original
      IF last element of original 
         RETURN
      END IF
      APPEND character to the end of the stack
   END FOR
END FUNCTION

FUNCTION dequeue(stack, original, reverseStack)
   WHILE stack is not empty
      SET temp to the first character
      REMOVE FIRST character of stack from stack
   END WHILE
END FUNCTION

//Javascript implementation
function reverse(original){
  
  // Create stack
  var stack = [];
  enqueue(stack, original);
  
  //Reverse stack 
  var reverseStack = [];
  dequeue(stack, original, reverseStack);
}

// Creates stack by adding character to an array
function enqueue(stack, original){
  for (let i = 0 ; i < original.length ; i++){
    if (i == original.length - 1){
      return;
    }
    
    stack.push(original[i]);
    console.log(stack); 
  }
}

// Unstacks the array by removing the first element
function dequeue(stack, original, reverseStack){
  let stackLength = stack.length;
  for (let i = 0 ; i < stackLength ; i++){
    stack.shift();
    console.log(stack);
  }
  
}

reverse("test");