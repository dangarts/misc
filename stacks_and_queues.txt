Exercises

1. What is the main difference between a stack and a queue?
Stack uses LIFO approach while queue uses FIFO.

2. What are the similarities between stacks and queues?

Stacks and queues are both linear data structures that rely on arrays to add, remove, and/or modify data elements.  They both have priority elements that are processed(whether if its FIFO or LIFO) upon during the input and output(reverse order) of data elements; allowing access to one element at a time.

3. Imagine you are an engineer tasked with implementing the UNDO and REDO options in a word processor such as Microsoft Word. Which data structure would you use for each option and why?

- UNDO: Stack (LIFO)
- REDO: Stack (LIFO)


PROGRAMMING QUESTIONS

1. Given a string, reverse it using a stack. For example, the string "Bloc!" should be converted to "!colB".

//pseudocode
FUNCTION REVERSE(original)
  INIT a new stack
  FOR each character in original
    CALL stack.push WITH character
  END FOR
  INIT reversed to empty string
  WHILE stack is not empty
    CALL stack.pop RETURNING character
    APPEND character to reversed
  END WHILE
  RETURN reversed
END FUNCTION

//Javascript implementation
function reverse(original){
  
  // Create stack
  var stack = [];
  for (let i = 0 ; i < original.length ; i++){
    stack.push(original[i]);
  }
  
  //Reverse stack
  var reverseStack = [];
  for (let i = original.length; i > 0 ; i--){
    var temp = stack.pop();
    reverseStack += temp;
  }
  console.log(reverseStack);
}
reverse("test");


2. Implement the pop method of a stack using one queue. Make a FIFO data structure mirror the functionality of a LIFO data structure. Since the internal list is not the same as defined in the checkpoint, it may help to rewrite the pseudocode first.

//pseudocode
CLASS queue
  INIT a new list
  FUNCTION enqueue(element)
    APPEND element to the end of the list
  END FUNCTION
  FUNCTION dequeue
    SET temp to the first element
    REMOVE last element of list from list
    RETURN temp
  END FUNCTION
END CLASS

SET original to "Test"
SET reverseQueue to NEW array
FOR each character in the original
  CALL enqueue WITH character
END FOR
WHILE stack is not empty
  CALL dequeue RETURNING character
  SET RETURNED character to returnedElement
  PUSH character to reverseQueue
END WHILE

//Javascript implementation
//Javascript implementation
class Queue { 
   constructor() { 
     this.list = []; 
   } 
   
   enqueue(element) {     
     this.list.push(element); //+++>
   }

   dequeue() {
     let temp = this.list.pop();//--->
     return temp;
   } 
} 

var queue = new Queue(); 
let original = "test";
let reverseQueue = [];
let returnedElement;

for ( let i = 0 ; i < original.length ; i++) {
 queue.enqueue(original[i]);
}

while (queue.list.length !== 0){
 returnedElement = queue.dequeue();
 reverseQueue.push(returnedElement);
}

console.log(reverseQueue);

To delete an item, take all of the elements in the queue one at a time and put them at the end of the queue, except for the last one which should be removed and returned.

1. Implement the enqueue and dequeue methods defined in the checkpoint inside your own Queue class.

//pseudocode
CLASS queue
  INIT a new list
  FUNCTION enqueue(element)
    APPEND element to the end of the list
  END FUNCTION
  FUNCTION dequeue
    SET temp to the first element
    REMOVE FIRST element of list from list
    RETURN temp
  END FUNCTION
END CLASS

SET original to "Test"
SET reverseQueue to NEW array
FOR each character in the original
  IF element IS NOT the last array element
    CALL enqueue WITH character
  END IF
END FOR
WHILE stack is not empty
  CALL dequeue RETURNING character
  SET RETURNED character to returnedElement
  APPEND character to reverseQueue
END WHILE

//Javascript implementation
class Queue { 
    constructor() { 
      this.list = []; 
    } 
    
    enqueue(element) {
        this.list.push(element); 
        //console.log(element);
    }

    dequeue() {
      let temp = this.list.shift();
      return temp;
    } 
} 

var queue = new Queue(); 
let original = "test";
let reverseQueue = [];
let returnedElement;

for ( let i = 0 ; i < original.length ; i++) {
  if(i !== original.length - 1){
    queue.enqueue(original[i], i);
  }
}

while (queue.list.length !== 0){
  returnedElement = queue.dequeue();
  reverseQueue.unshift(returnedElement);
  //console.log(returnedElement);
}
console.log(reverseQueue);